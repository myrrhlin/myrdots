
" (compatibility with vi can cause unexpected issues)
" Set 'nocompatible' to ward off unexpected things that your distro might
" have made, as well as sanely reset options when re-sourcing .vimrc
set nocompatible

" Attempt to determine the type of a file based on its name and possibly its
" contents. Use this to allow intelligent auto-indenting for each filetype,
" and for plugins that are filetype specific.
" (this enables filetype detection, and both plugin and indent features)
filetype indent plugin on

" Enable syntax highlighting
syntax on

"------------------------------------------------------------
" Must have options {{{1
"
" These are highly recommended options.

" Vim with default settings does not allow easy switching between multiple files
" in the same editor window. Users can use multiple split windows or multiple
" tab pages to edit multiple files, but it is still best to enable an option to
" allow easier switching between files.
"
" One such option is the 'hidden' option, which allows you to re-use the same
" window and switch from an unsaved buffer without saving it first. Also allows
" you to keep an undo history for multiple files when re-using the same window
" in this way. Note that using persistent undo also lets you undo in multiple
" files even in the same window, but is less efficient and is actually designed
" for keeping undo history after closing Vim entirely. Vim will complain if you
" try to quit without saving, and swap files will keep you safe if your computer
" crashes.
" set hidden

" Note that not everyone likes working this way (with the hidden option).
" Alternatives include using tabs or split windows instead of re-using the same
" window as mentioned above, and/or either of the following options:

set confirm
" implies autowrite. write contents of file on each next, last, suspend, exit, quit, et al.
set autowriteall

" Better command-line completion
set wildmenu
" make wildmenu behave similar to bash completion
set wildmode=list:longest

" Show partial commands in the last line of the screen
set showcmd

" Highlight searches (use <C-L> to temporarily turn off highlighting; see the
" mapping of <C-L> below)
set hlsearch

" Modelines have historically been a source of security vulnerabilities. As
" such, it may be a good idea to disable them and use the securemodelines
" script, <http://www.vim.org/scripts/script.php?script_id=1876>.
" set nomodeline


"------------------------------------------------------------
" Usability options {{{1
"
" These are options that users frequently set in their .vimrc. Some of them
" change Vim's behaviour in ways which deviate from the true Vi way, but
" which are considered to add usability. Which, if any, of these options to
" use is very much a personal preference, but they are harmless.

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on. Useful for READMEs, etc.
set autoindent

" adds an indent after keywords, c-style bracing {, also dedents lines with #
" use with autoindent. modify with cinkeys, cinoptions, cinwords, cinscopedecls
" https://vimhelp.org/options.txt.html#%27smartindent%27
" set smartindent

" Stop certain movements from always going to the first character of a line.
" While this behaviour deviates from that of Vi, it does what most users
" coming from other editors would expect.
set nostartofline

" Display the cursor position on the last line of the screen or in the status
" line of a window
set ruler

" Always display the status line, even if only one window is displayed
set laststatus=2

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

" Use visual bell instead of beeping when doing something wrong
set visualbell

" And reset the terminal code for the visual bell. If visualbell is set, and
" this line is also included, vim will neither flash nor beep. If visualbell
" is unset, this does nothing.
set t_vb=

" Enable use of the mouse for all modes
set mouse=a

" Set the command window height to 2 lines, to avoid many cases of having to
" "press <Enter> to continue"
set cmdheight=2

" Display line numbers on the left
set number

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200

" Highlight cursor line underneath cursor (?)
" set cursorline

" Use <F11> to toggle between 'paste' and 'nopaste'
set pastetoggle=<F11>

" command history default is 20
set history=100

" background color
set bg=dark

" remember cursor position on open
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | execute "normal! g`\"" | endif
endif

" allow lines to extend to any length
set nowrap

set foldmethod=syntax
set foldlevelstart=3

let perl_fold=1
let sh_fold_enabled=1
let perl_extended_vars=1
let perl_sync_dist=250

" related to tab sessions:
set ssop-=options    " do not store global and local values in a session
set ssop-=folds      " do not store folds

" function to strip trailing whitespace on entire buffer
function! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun

" strip trailing space on save for filetypes...
" using file extension
autocmd BufWritePre *.pl,*.pm,*.t :call <SID>StripTrailingWhitespaces()

" Often files are not necessarily identified by extension, if so use e.g.:
" autocmd BufWritePre * if &ft =~ 'sh\|perl\|python' | :call <SID>StripTrailingWhitespaces() | endif

" Or if you want it to be called when file-type is set
autocmd FileType sh,perl,python  :call <SID>StripTrailingWhitespaces()

"------------------------------------------------------------
" Indentation options {{{1
"
" Indentation settings according to personal preference, when not controlled
" by filetype.

" Indentation settings for using <n> spaces instead of tabs.
" Do not change 'tabstop' from its default value of 8 with this setup.
set shiftwidth=3
set softtabstop=3
set expandtab

" Indentation settings for using hard tabs for indent. Display tabs as
" <n> characters wide.
"set shiftwidth=3
"set tabstop=3

"------------------------------------------------------------
" Mappings {{{1
"
" Useful mappings

" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,
" which is the default
map Y y$

" Map <C-L> (redraw screen) to also turn off search highlighting until the
" next search
nnoremap <C-L> :nohl<CR><C-L>

" Remove all trailing whitespace by pressing F5
" but this moves the cursor?
nnoremap <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar><CR>



" -----------------------------------------------------------
set encoding=utf-8
scriptencoding utf-8

" display whitespace
" set listchars=tab:→…,trail:•,nbsp:⎵,extends:⟩,precedes:⟨,eol:¶
set listchars=eol:¬,tab:▸\ 

"  tab editing   https://vim.fandom.com/wiki/Using_tab_pages
"  https://vim.fandom.com/wiki/Alternative_tab_navigation
nnoremap H gT
nnoremap L gt
nnoremap <C-Left> :tabprevious<CR>
nnoremap <C-Right> :tabnext<CR>
" alt-arrow to move tab left
nnoremap <silent> <A-Left> :execute 'silent! tabmove ' . (tabpagenr()-2)<CR>

" automatically reload vimrc after saving
" autocmd BufWritePost .vimrc source %

" https://github.com/merrilymeredith/dotfiles/blob/master/.vimrc#L131-L132
command! -nargs=* -complete=file Tig      call tig#Tig(<f-args>)
command!                         TigBlame call tig#TigBlame()

